<script setup>
import { ref, reactive, onMounted, onUnmounted, onBeforeMount, watch } from "vue"
import axios from "axios"
import { maskStore } from "@/stores/storage.js"
import { VDataTable, VDataTableServer } from "vuetify/labs/VDataTable"
import { pageInfo } from "@/hyweb/pageInfo.js"
import { tool } from "@/hyweb/common.js"
const mk = maskStore()

onUnmounted(() => {
  console.log("onUnmounted:" + pageInfo.pageID)
})

onBeforeMount(() => {
  //1-doMask
  mk.doOverlay(false)
  //2-set pageInfo
  pageInfo.pageID = "account-list"
  pageInfo.pageTitle = "帳號管理";
  pageInfo["item-value"] = "userID"
  pageInfo["show-select"] = true
  pageInfo.headers = ([
    { title: "帳號", align: "start", key: "userID", },
    { title: "姓名", align: "start", key: "userName" },
    { title: "部門", align: "start", key: "userDept" },
    { title: "Email", align: "start", key: "userEmail" },
    { title: "狀態", align: "end", key: "userStatus" },
    { title: "動作", align: "end", key: "action" },
  ])
  pageInfo.actBtnList.length = 0;
  pageInfo.actBtnList.push({ name: "修改", to: "/account-form", atype: "link" })
  pageInfo.actBtnList.push({ name: "停用", to: "doDel", atype: "fun" })
  pageInfo.actBtnList.push({ name: "刪除", to: "doBan", atype: "fun" })
  pageInfo.actFuncList = {
    doDel: () => {
      alert("delete")
    },
    doBan: () => {
      alert("doBan")
    }
  }
  //3-search form info 
  pageInfo.sortBy = [{ key: "userID", order: "asc" }, { key: "userName", order: "asc" }]

  console.log("onBeforeMount:" + pageInfo.pageID)
})

onMounted(() => {
  console.log("onMounted:" + pageInfo.pageID)
})

//option={groupBy:[],itemsPerPage:10,page:1,search:,sortBy[]}
const loadItems = ({ page, itemsPerPage,sortBy}) => {
  console.log("loadItems")
  pageInfo.page = page
  pageInfo.sortBy = sortBy
  pageInfo["items-per-page"] = itemsPerPage
  pageInfo.loading = true
  //tool.doLog("pageInfo",JSON.parse(JSON.stringify(pageInfo)))
  let apiurl = "/account" + (pageInfo.page > 1 ? pageInfo.page : "") + ".json"
  getData.fetch(apiurl).then((data) => {
    pageInfo.items = data.list
    pageInfo["items-length"] = data.totalItems
    pageInfo.loading = false
  })
}

const getData = {
  async fetch(apiurl) {
    return new Promise(resolve => {
      setTimeout(() => {
        axios.post(apiurl, pageInfo)
          .then(function (response) {
            resolve(response.data)
          })
          .catch(function (error) {
            console.log(error);
          });
      }, 500)
    })
  },
}

//dyanmic call method
const doFunc = (methodName) => {
  pageInfo.actFuncList[methodName]();
}



</script>

<template><h1>{{ pageInfo.pageTitle }}</h1>
<!-- <p> <v-btn @click="openMask()" size="x-small">storage mask Button2</v-btn>
  </p>

  <p> <v-btn to="account-form" size="x-small">Account Form</v-btn>
  </p> -->
<!-- v-model="pageInfo.selected"  item-selectable="selectable"-->
<pre>==>{{ pageInfo.selected }}</pre>

<v-data-table-server v-bind="pageInfo"  v-model="pageInfo.selected" @update:options="loadItems">

  <template v-slot:item.action="{ item }">
        <td class="text-center">
          <div class="text-center">
            <v-menu open-on-hover>
              <template v-slot:activator="{ props }">
                <v-btn density="compact" icon="mdi-plus" color="success" v-bind="props" />
              </template>

              <v-list>
                <v-list-item v-for="(item, index) in pageInfo.actBtnList" :key="index">
                  <v-btn v-if="item.atype == 'link'" :to="item.to">{{ item.name }}</v-btn>
                  <v-btn v-if="item.atype == 'fun'" @click="doFunc(item.to)">{{ item.name }}</v-btn>
                </v-list-item>
              </v-list>
            </v-menu>
          </div>
        </td>
    </template>
</v-data-table-server>



<!-- v-model:items-per-page="itemsPerPage"
    :headers="headers"
    :items-length="totalItems"
    :items="serverItems"
    :loading="loading"
    :search="search"
    class="elevation-1"
    item-value="name" -->
<!-- <v-data-table class="elevation-1" v-bind="pageInfo" :pagination.sync="op">
    
    <template v-slot:bottom>
      <div class="text-center pt-2">
        <v-pagination v-bind="op" length="4"></v-pagination>
      </div>
    </template>


    <template v-slot:item.action="{ item }">
      <td>

        <div class="text-center">
          <v-menu open-on-hover>
            <template v-slot:activator="{ props }">
              <v-btn color="success" v-bind="props">
                管理
              </v-btn>
            </template>

            <v-list>
              <v-list-item v-for="(item, index) in pageInfo.actBtnList" :key="index">
                <v-btn v-if="item.atype === 'link'" :to="item.to">{{ item.name }}</v-btn>
                <v-btn v-if="item.atype === 'fun'" @click="doFunc(item.to)">{{ item.name }}</v-btn>
              </v-list-item>
            </v-list>
          </v-menu>
        </div>

      </td>
    </template>



  </v-data-table> -->

<!-- <template v-slot:bottom>
      <div class="text-center pt-2">
        <v-pagination v-model="pageInfo['pagination.sync'].page"
          :length="pageInfo['pagination.sync'].totalPages"></v-pagination>
      </div>
    </template> -->

<!-- <v-pagination
    v-bind="pageInfo['pagination.sync']"
    color="primary"
    :disabled="pageInfo['pagination.sync'].page < 1"
    prev-icon="mdi-chevron-left"
    next-icon="mdi-chevron-right"
  ></v-pagination> -->



<!-- <v-data-table class="elevation-1" :headers="pageInfo.headers" :items="pageInfo.items" items-per-page="5"
    item-value="name" item-selectable="selectable" show-select>
    <template v-slot:bottom>
      <div class="text-center pt-2">
        <v-pagination v-model="pageInfo.currentPage" :length="pageInfo.pageSize"></v-pagination>
      </div>
    </template>
  </v-data-table> --></template>


